# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.pydantic_utilities import pydantic_v1
from ...core.request_options import RequestOptions
from ...errors.bad_request_error import BadRequestError
from ...errors.forbidden_error import ForbiddenError
from ...errors.internal_server_error import InternalServerError
from ...errors.not_found_error import NotFoundError
from ...errors.too_many_requests_error import TooManyRequestsError
from ...errors.unauthorized_error import UnauthorizedError
from ...types.dom import Dom
from ...types.page_details import PageDetails
from ...types.page_list import PageList
from ...types.page_open_graph import PageOpenGraph
from ...types.page_seo import PageSeo
from .resources.scripts.client import AsyncScriptsClient, ScriptsClient
from .types.dom_write_nodes_item import DomWriteNodesItem
from .types.update_static_content_response import UpdateStaticContentResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PagesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        self.scripts = ScriptsClient(client_wrapper=self._client_wrapper)

    def list(
        self,
        site_id: str,
        *,
        locale: typing.Optional[str] = None,
        limit: typing.Optional[float] = None,
        offset: typing.Optional[float] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PageList:
        """
        List of all pages for a site </br></br> Required scope | `pages:read`

        Parameters
        ----------
        site_id : str
            Unique identifier for a Site

        locale : typing.Optional[str]
            Unique identifier for a specific locale. Applicable, when using localization.

        limit : typing.Optional[float]
            Maximum number of records to be returned (max limit: 100)

        offset : typing.Optional[float]
            Offset used for pagination if the results have more than limit records

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PageList
            Request was successful

        Examples
        --------
        from webflow.client import Webflow

        client = Webflow(
            access_token="YOUR_ACCESS_TOKEN",
        )
        client.pages.list(
            site_id="site_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"sites/{jsonable_encoder(site_id)}/pages",
            method="GET",
            params={"locale": locale, "limit": limit, "offset": offset},
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(PageList, _response.json())  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 401:
                raise UnauthorizedError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 429:
                raise TooManyRequestsError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 500:
                raise InternalServerError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_metadata(
        self,
        page_id: str,
        *,
        locale: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PageDetails:
        """
        Get metadata information for a single page </br></br> Required scope | `pages:read`

        Parameters
        ----------
        page_id : str
            Unique identifier for a Page

        locale : typing.Optional[str]
            Unique identifier for a specific locale. Applicable, when using localization.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PageDetails
            Request was successful

        Examples
        --------
        from webflow.client import Webflow

        client = Webflow(
            access_token="YOUR_ACCESS_TOKEN",
        )
        client.pages.get_metadata(
            page_id="page_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"pages/{jsonable_encoder(page_id)}",
            method="GET",
            params={"locale": locale},
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(PageDetails, _response.json())  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 401:
                raise UnauthorizedError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 429:
                raise TooManyRequestsError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 500:
                raise InternalServerError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_page_settings(
        self,
        page_id: str,
        *,
        locale: typing.Optional[str] = None,
        id: typing.Optional[str] = OMIT,
        site_id: typing.Optional[str] = OMIT,
        title: typing.Optional[str] = OMIT,
        slug: typing.Optional[str] = OMIT,
        parent_id: typing.Optional[str] = OMIT,
        collection_id: typing.Optional[str] = OMIT,
        created_on: typing.Optional[dt.datetime] = OMIT,
        last_updated: typing.Optional[dt.datetime] = OMIT,
        archived: typing.Optional[bool] = OMIT,
        draft: typing.Optional[bool] = OMIT,
        can_branch: typing.Optional[bool] = OMIT,
        is_members_only: typing.Optional[bool] = OMIT,
        seo: typing.Optional[PageSeo] = OMIT,
        open_graph: typing.Optional[PageOpenGraph] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PageDetails:
        """
        Update Page-level metadata, including SEO and Open Graph fields. </br></br> Required scope | `pages:write`

        Parameters
        ----------
        page_id : str
            Unique identifier for a Page

        locale : typing.Optional[str]
            Unique identifier for a specific locale. Applicable, when using localization.

        id : typing.Optional[str]
            Unique identifier for the Page

        site_id : typing.Optional[str]
            Unique identifier for the Site

        title : typing.Optional[str]
            Title of the Page

        slug : typing.Optional[str]
            slug of the Page (derived from title)

        parent_id : typing.Optional[str]
            Identifier of the parent folder

        collection_id : typing.Optional[str]
            Unique identifier for a linked Collection, value will be null if the Page is not part of a Collection.

        created_on : typing.Optional[dt.datetime]
            The date the Page was created

        last_updated : typing.Optional[dt.datetime]
            The date the Page was most recently updated

        archived : typing.Optional[bool]
            Whether the Page has been archived

        draft : typing.Optional[bool]
            Whether the Page is a draft

        can_branch : typing.Optional[bool]
            Indicates whether the Page supports [Page Branching](https://university.webflow.com/lesson/page-branching)

        is_members_only : typing.Optional[bool]
            Indicates whether the Page is restricted by [Memberships Controls](https://university.webflow.com/lesson/webflow-memberships-overview#how-to-manage-page-restrictions)

        seo : typing.Optional[PageSeo]
            SEO-related fields for the Page

        open_graph : typing.Optional[PageOpenGraph]
            Open Graph fields for the Page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PageDetails
            Request was successful

        Examples
        --------
        import datetime

        from webflow import PageOpenGraph, PageSeo
        from webflow.client import Webflow

        client = Webflow(
            access_token="YOUR_ACCESS_TOKEN",
        )
        client.pages.update_page_settings(
            page_id="page_id",
            id="6596da6045e56dee495bcbba",
            site_id="6258612d1ee792848f805dcf",
            title="Guide to the Galaxy",
            slug="guide-to-the-galaxy",
            parent_id="6419db964a9c435aa3af6251",
            collection_id="6390c49774a71f12831a08e3",
            created_on=datetime.datetime.fromisoformat(
                "2024-03-11 10:42:00+00:00",
            ),
            last_updated=datetime.datetime.fromisoformat(
                "2024-03-11 10:42:42+00:00",
            ),
            archived=False,
            draft=False,
            can_branch=True,
            seo=PageSeo(
                title="The Ultimate Hitchhiker's Guide to the Galaxy",
                description="Everything you need to know about the galaxy, from avoiding Vogon poetry to the importance of towels.",
            ),
            open_graph=PageOpenGraph(
                title="Explore the Cosmos with The Ultimate Guide",
                title_copied=False,
                description="Dive deep into the mysteries of the universe with your guide to everything galactic.",
                description_copied=False,
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"pages/{jsonable_encoder(page_id)}",
            method="PUT",
            params={"locale": locale},
            json={
                "id": id,
                "siteId": site_id,
                "title": title,
                "slug": slug,
                "parentId": parent_id,
                "collectionId": collection_id,
                "createdOn": created_on,
                "lastUpdated": last_updated,
                "archived": archived,
                "draft": draft,
                "canBranch": can_branch,
                "isMembersOnly": is_members_only,
                "seo": seo,
                "openGraph": open_graph,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(PageDetails, _response.json())  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 401:
                raise UnauthorizedError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 429:
                raise TooManyRequestsError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 500:
                raise InternalServerError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_content(
        self,
        page_id: str,
        *,
        locale: typing.Optional[str] = None,
        limit: typing.Optional[float] = None,
        offset: typing.Optional[float] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Dom:
        """
        Get static content from a static page. </br> If you do not provide a Locale ID in your request, the response will return any content that can be localized from the Primary locale</br></br> Required scope | `pages:read`

        Parameters
        ----------
        page_id : str
            Unique identifier for a Page

        locale : typing.Optional[str]
            Unique identifier for a specific locale. Applicable, when using localization.

        limit : typing.Optional[float]
            Maximum number of records to be returned (max limit: 100)

        offset : typing.Optional[float]
            Offset used for pagination if the results have more than limit records

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Dom
            Request was successful

        Examples
        --------
        from webflow.client import Webflow

        client = Webflow(
            access_token="YOUR_ACCESS_TOKEN",
        )
        client.pages.get_content(
            page_id="page_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"pages/{jsonable_encoder(page_id)}/dom",
            method="GET",
            params={"locale": locale, "limit": limit, "offset": offset},
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(Dom, _response.json())  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 401:
                raise UnauthorizedError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 403:
                raise ForbiddenError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 429:
                raise TooManyRequestsError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 500:
                raise InternalServerError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_static_content(
        self,
        page_id: str,
        *,
        locale: str,
        nodes: typing.Sequence[DomWriteNodesItem],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateStaticContentResponse:
        """
        Update static content on a static page. This endpoint supports sending 1000 nodes per request. </br></br> Required scope | `pages:write`

        Parameters
        ----------
        page_id : str
            Unique identifier for a Page

        locale : str
            The locale identifier.

        nodes : typing.Sequence[DomWriteNodesItem]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateStaticContentResponse
            Request was successful

        Examples
        --------
        from webflow import DomWriteNodesItem
        from webflow.client import Webflow

        client = Webflow(
            access_token="YOUR_ACCESS_TOKEN",
        )
        client.pages.update_static_content(
            page_id="page_id",
            locale="locale",
            nodes=[
                DomWriteNodesItem(
                    node_id="a245c12d-995b-55ee-5ec7-aa36a6cad623",
                    text="<h1>The Hitchhiker's Guide to the Galaxy</h1>",
                ),
                DomWriteNodesItem(
                    node_id="a245c12d-995b-55ee-5ec7-aa36a6cad627",
                    text="<div><h3>Don't Panic!</h3><p>Always know where your towel is.</p></div>",
                ),
                DomWriteNodesItem(
                    node_id="a245c12d-995b-55ee-5ec7-aa36a6cad629",
                    text="<img alt='Marvin, the Paranoid Android' src='path/to/image/with/assetId/659595234426a9fcbad57043'/>",
                ),
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"pages/{jsonable_encoder(page_id)}/dom",
            method="POST",
            params={"locale": locale},
            json={"nodes": nodes},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(UpdateStaticContentResponse, _response.json())  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 401:
                raise UnauthorizedError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 403:
                raise ForbiddenError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 429:
                raise TooManyRequestsError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 500:
                raise InternalServerError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPagesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        self.scripts = AsyncScriptsClient(client_wrapper=self._client_wrapper)

    async def list(
        self,
        site_id: str,
        *,
        locale: typing.Optional[str] = None,
        limit: typing.Optional[float] = None,
        offset: typing.Optional[float] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PageList:
        """
        List of all pages for a site </br></br> Required scope | `pages:read`

        Parameters
        ----------
        site_id : str
            Unique identifier for a Site

        locale : typing.Optional[str]
            Unique identifier for a specific locale. Applicable, when using localization.

        limit : typing.Optional[float]
            Maximum number of records to be returned (max limit: 100)

        offset : typing.Optional[float]
            Offset used for pagination if the results have more than limit records

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PageList
            Request was successful

        Examples
        --------
        from webflow.client import AsyncWebflow

        client = AsyncWebflow(
            access_token="YOUR_ACCESS_TOKEN",
        )
        await client.pages.list(
            site_id="site_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"sites/{jsonable_encoder(site_id)}/pages",
            method="GET",
            params={"locale": locale, "limit": limit, "offset": offset},
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(PageList, _response.json())  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 401:
                raise UnauthorizedError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 429:
                raise TooManyRequestsError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 500:
                raise InternalServerError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_metadata(
        self,
        page_id: str,
        *,
        locale: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PageDetails:
        """
        Get metadata information for a single page </br></br> Required scope | `pages:read`

        Parameters
        ----------
        page_id : str
            Unique identifier for a Page

        locale : typing.Optional[str]
            Unique identifier for a specific locale. Applicable, when using localization.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PageDetails
            Request was successful

        Examples
        --------
        from webflow.client import AsyncWebflow

        client = AsyncWebflow(
            access_token="YOUR_ACCESS_TOKEN",
        )
        await client.pages.get_metadata(
            page_id="page_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"pages/{jsonable_encoder(page_id)}",
            method="GET",
            params={"locale": locale},
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(PageDetails, _response.json())  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 401:
                raise UnauthorizedError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 429:
                raise TooManyRequestsError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 500:
                raise InternalServerError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_page_settings(
        self,
        page_id: str,
        *,
        locale: typing.Optional[str] = None,
        id: typing.Optional[str] = OMIT,
        site_id: typing.Optional[str] = OMIT,
        title: typing.Optional[str] = OMIT,
        slug: typing.Optional[str] = OMIT,
        parent_id: typing.Optional[str] = OMIT,
        collection_id: typing.Optional[str] = OMIT,
        created_on: typing.Optional[dt.datetime] = OMIT,
        last_updated: typing.Optional[dt.datetime] = OMIT,
        archived: typing.Optional[bool] = OMIT,
        draft: typing.Optional[bool] = OMIT,
        can_branch: typing.Optional[bool] = OMIT,
        is_members_only: typing.Optional[bool] = OMIT,
        seo: typing.Optional[PageSeo] = OMIT,
        open_graph: typing.Optional[PageOpenGraph] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PageDetails:
        """
        Update Page-level metadata, including SEO and Open Graph fields. </br></br> Required scope | `pages:write`

        Parameters
        ----------
        page_id : str
            Unique identifier for a Page

        locale : typing.Optional[str]
            Unique identifier for a specific locale. Applicable, when using localization.

        id : typing.Optional[str]
            Unique identifier for the Page

        site_id : typing.Optional[str]
            Unique identifier for the Site

        title : typing.Optional[str]
            Title of the Page

        slug : typing.Optional[str]
            slug of the Page (derived from title)

        parent_id : typing.Optional[str]
            Identifier of the parent folder

        collection_id : typing.Optional[str]
            Unique identifier for a linked Collection, value will be null if the Page is not part of a Collection.

        created_on : typing.Optional[dt.datetime]
            The date the Page was created

        last_updated : typing.Optional[dt.datetime]
            The date the Page was most recently updated

        archived : typing.Optional[bool]
            Whether the Page has been archived

        draft : typing.Optional[bool]
            Whether the Page is a draft

        can_branch : typing.Optional[bool]
            Indicates whether the Page supports [Page Branching](https://university.webflow.com/lesson/page-branching)

        is_members_only : typing.Optional[bool]
            Indicates whether the Page is restricted by [Memberships Controls](https://university.webflow.com/lesson/webflow-memberships-overview#how-to-manage-page-restrictions)

        seo : typing.Optional[PageSeo]
            SEO-related fields for the Page

        open_graph : typing.Optional[PageOpenGraph]
            Open Graph fields for the Page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PageDetails
            Request was successful

        Examples
        --------
        import datetime

        from webflow import PageOpenGraph, PageSeo
        from webflow.client import AsyncWebflow

        client = AsyncWebflow(
            access_token="YOUR_ACCESS_TOKEN",
        )
        await client.pages.update_page_settings(
            page_id="page_id",
            id="6596da6045e56dee495bcbba",
            site_id="6258612d1ee792848f805dcf",
            title="Guide to the Galaxy",
            slug="guide-to-the-galaxy",
            parent_id="6419db964a9c435aa3af6251",
            collection_id="6390c49774a71f12831a08e3",
            created_on=datetime.datetime.fromisoformat(
                "2024-03-11 10:42:00+00:00",
            ),
            last_updated=datetime.datetime.fromisoformat(
                "2024-03-11 10:42:42+00:00",
            ),
            archived=False,
            draft=False,
            can_branch=True,
            seo=PageSeo(
                title="The Ultimate Hitchhiker's Guide to the Galaxy",
                description="Everything you need to know about the galaxy, from avoiding Vogon poetry to the importance of towels.",
            ),
            open_graph=PageOpenGraph(
                title="Explore the Cosmos with The Ultimate Guide",
                title_copied=False,
                description="Dive deep into the mysteries of the universe with your guide to everything galactic.",
                description_copied=False,
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"pages/{jsonable_encoder(page_id)}",
            method="PUT",
            params={"locale": locale},
            json={
                "id": id,
                "siteId": site_id,
                "title": title,
                "slug": slug,
                "parentId": parent_id,
                "collectionId": collection_id,
                "createdOn": created_on,
                "lastUpdated": last_updated,
                "archived": archived,
                "draft": draft,
                "canBranch": can_branch,
                "isMembersOnly": is_members_only,
                "seo": seo,
                "openGraph": open_graph,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(PageDetails, _response.json())  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 401:
                raise UnauthorizedError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 429:
                raise TooManyRequestsError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 500:
                raise InternalServerError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_content(
        self,
        page_id: str,
        *,
        locale: typing.Optional[str] = None,
        limit: typing.Optional[float] = None,
        offset: typing.Optional[float] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Dom:
        """
        Get static content from a static page. </br> If you do not provide a Locale ID in your request, the response will return any content that can be localized from the Primary locale</br></br> Required scope | `pages:read`

        Parameters
        ----------
        page_id : str
            Unique identifier for a Page

        locale : typing.Optional[str]
            Unique identifier for a specific locale. Applicable, when using localization.

        limit : typing.Optional[float]
            Maximum number of records to be returned (max limit: 100)

        offset : typing.Optional[float]
            Offset used for pagination if the results have more than limit records

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Dom
            Request was successful

        Examples
        --------
        from webflow.client import AsyncWebflow

        client = AsyncWebflow(
            access_token="YOUR_ACCESS_TOKEN",
        )
        await client.pages.get_content(
            page_id="page_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"pages/{jsonable_encoder(page_id)}/dom",
            method="GET",
            params={"locale": locale, "limit": limit, "offset": offset},
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(Dom, _response.json())  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 401:
                raise UnauthorizedError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 403:
                raise ForbiddenError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 429:
                raise TooManyRequestsError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 500:
                raise InternalServerError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_static_content(
        self,
        page_id: str,
        *,
        locale: str,
        nodes: typing.Sequence[DomWriteNodesItem],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateStaticContentResponse:
        """
        Update static content on a static page. This endpoint supports sending 1000 nodes per request. </br></br> Required scope | `pages:write`

        Parameters
        ----------
        page_id : str
            Unique identifier for a Page

        locale : str
            The locale identifier.

        nodes : typing.Sequence[DomWriteNodesItem]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateStaticContentResponse
            Request was successful

        Examples
        --------
        from webflow import DomWriteNodesItem
        from webflow.client import AsyncWebflow

        client = AsyncWebflow(
            access_token="YOUR_ACCESS_TOKEN",
        )
        await client.pages.update_static_content(
            page_id="page_id",
            locale="locale",
            nodes=[
                DomWriteNodesItem(
                    node_id="a245c12d-995b-55ee-5ec7-aa36a6cad623",
                    text="<h1>The Hitchhiker's Guide to the Galaxy</h1>",
                ),
                DomWriteNodesItem(
                    node_id="a245c12d-995b-55ee-5ec7-aa36a6cad627",
                    text="<div><h3>Don't Panic!</h3><p>Always know where your towel is.</p></div>",
                ),
                DomWriteNodesItem(
                    node_id="a245c12d-995b-55ee-5ec7-aa36a6cad629",
                    text="<img alt='Marvin, the Paranoid Android' src='path/to/image/with/assetId/659595234426a9fcbad57043'/>",
                ),
            ],
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"pages/{jsonable_encoder(page_id)}/dom",
            method="POST",
            params={"locale": locale},
            json={"nodes": nodes},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(UpdateStaticContentResponse, _response.json())  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 401:
                raise UnauthorizedError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 403:
                raise ForbiddenError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 429:
                raise TooManyRequestsError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 500:
                raise InternalServerError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

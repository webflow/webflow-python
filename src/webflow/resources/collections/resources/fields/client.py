# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from .....core.api_error import ApiError
from .....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .....core.jsonable_encoder import jsonable_encoder
from .....core.pydantic_utilities import pydantic_v1
from .....core.request_options import RequestOptions
from .....errors.bad_request_error import BadRequestError
from .....errors.internal_server_error import InternalServerError
from .....errors.not_found_error import NotFoundError
from .....errors.too_many_requests_error import TooManyRequestsError
from .....errors.unauthorized_error import UnauthorizedError
from .....types.field import Field
from .types.field_create_type import FieldCreateType

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class FieldsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        collection_id: str,
        *,
        type: FieldCreateType,
        display_name: str,
        is_required: typing.Optional[bool] = OMIT,
        help_text: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Field:
        """
        Create a custom field in a collection. </br></br> Slugs must be all lowercase letters without spaces. If you pass a string with uppercase letters and/or spaces to the "Slug" property, Webflow will convert the slug to lowercase and replace spaces with "-." </br></br> Only some field types can be created through the API. This endpoint does not currently support bulk creation. </br></br> Required scope | `cms:write`

        Parameters
        ----------
        collection_id : str
            Unique identifier for a Collection

        type : FieldCreateType
            Choose these appropriate field type for your collection data

        display_name : str
            The name of a field

        is_required : typing.Optional[bool]
            define whether a field is required in a collection

        help_text : typing.Optional[str]
            Additional text to help anyone filling out this field

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Field
            Request was successful

        Examples
        --------
        from webflow.client import Webflow
        from webflow.resources.collections import FieldCreateType

        client = Webflow(
            access_token="YOUR_ACCESS_TOKEN",
        )
        client.collections.fields.create(
            collection_id="collection_id",
            is_required=False,
            type=FieldCreateType.RICH_TEXT,
            display_name="Post Body",
            help_text="Add the body of your post here",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"collections/{jsonable_encoder(collection_id)}/fields",
            method="POST",
            json={"isRequired": is_required, "type": type, "displayName": display_name, "helpText": help_text},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(Field, _response.json())  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 401:
                raise UnauthorizedError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 429:
                raise TooManyRequestsError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 500:
                raise InternalServerError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        collection_id: str,
        field_id: str,
        *,
        is_required: typing.Optional[bool] = OMIT,
        display_name: typing.Optional[str] = OMIT,
        help_text: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Field:
        """
        Update a custom field in a collection. </br></br> Required scope | `cms:write`

        Parameters
        ----------
        collection_id : str
            Unique identifier for a Collection

        field_id : str
            Unique identifier for a Field in a collection

        is_required : typing.Optional[bool]
            Define whether a field is required in a collection

        display_name : typing.Optional[str]
            The name of a field

        help_text : typing.Optional[str]
            Additional text to help anyone filling out this field

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Field
            Request was successful

        Examples
        --------
        from webflow.client import Webflow

        client = Webflow(
            access_token="YOUR_ACCESS_TOKEN",
        )
        client.collections.fields.update(
            collection_id="collection_id",
            field_id="field_id",
            is_required=False,
            display_name="Post Body",
            help_text="Add the body of your post here",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"collections/{jsonable_encoder(collection_id)}/fields/{jsonable_encoder(field_id)}",
            method="PATCH",
            json={"isRequired": is_required, "displayName": display_name, "helpText": help_text},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(Field, _response.json())  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 401:
                raise UnauthorizedError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 429:
                raise TooManyRequestsError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 500:
                raise InternalServerError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncFieldsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        collection_id: str,
        *,
        type: FieldCreateType,
        display_name: str,
        is_required: typing.Optional[bool] = OMIT,
        help_text: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Field:
        """
        Create a custom field in a collection. </br></br> Slugs must be all lowercase letters without spaces. If you pass a string with uppercase letters and/or spaces to the "Slug" property, Webflow will convert the slug to lowercase and replace spaces with "-." </br></br> Only some field types can be created through the API. This endpoint does not currently support bulk creation. </br></br> Required scope | `cms:write`

        Parameters
        ----------
        collection_id : str
            Unique identifier for a Collection

        type : FieldCreateType
            Choose these appropriate field type for your collection data

        display_name : str
            The name of a field

        is_required : typing.Optional[bool]
            define whether a field is required in a collection

        help_text : typing.Optional[str]
            Additional text to help anyone filling out this field

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Field
            Request was successful

        Examples
        --------
        from webflow.client import AsyncWebflow
        from webflow.resources.collections import FieldCreateType

        client = AsyncWebflow(
            access_token="YOUR_ACCESS_TOKEN",
        )
        await client.collections.fields.create(
            collection_id="collection_id",
            is_required=False,
            type=FieldCreateType.RICH_TEXT,
            display_name="Post Body",
            help_text="Add the body of your post here",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"collections/{jsonable_encoder(collection_id)}/fields",
            method="POST",
            json={"isRequired": is_required, "type": type, "displayName": display_name, "helpText": help_text},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(Field, _response.json())  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 401:
                raise UnauthorizedError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 429:
                raise TooManyRequestsError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 500:
                raise InternalServerError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        collection_id: str,
        field_id: str,
        *,
        is_required: typing.Optional[bool] = OMIT,
        display_name: typing.Optional[str] = OMIT,
        help_text: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Field:
        """
        Update a custom field in a collection. </br></br> Required scope | `cms:write`

        Parameters
        ----------
        collection_id : str
            Unique identifier for a Collection

        field_id : str
            Unique identifier for a Field in a collection

        is_required : typing.Optional[bool]
            Define whether a field is required in a collection

        display_name : typing.Optional[str]
            The name of a field

        help_text : typing.Optional[str]
            Additional text to help anyone filling out this field

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Field
            Request was successful

        Examples
        --------
        from webflow.client import AsyncWebflow

        client = AsyncWebflow(
            access_token="YOUR_ACCESS_TOKEN",
        )
        await client.collections.fields.update(
            collection_id="collection_id",
            field_id="field_id",
            is_required=False,
            display_name="Post Body",
            help_text="Add the body of your post here",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"collections/{jsonable_encoder(collection_id)}/fields/{jsonable_encoder(field_id)}",
            method="PATCH",
            json={"isRequired": is_required, "displayName": display_name, "helpText": help_text},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(Field, _response.json())  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 401:
                raise UnauthorizedError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 429:
                raise TooManyRequestsError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 500:
                raise InternalServerError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .user_access_groups_item_type import UserAccessGroupsItemType

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class UserAccessGroupsItem(pydantic.BaseModel):
    """
    Access group slugs and types
    """

    slug: typing.Optional[str] = pydantic.Field(description="Access group identifier for APIs")
    type: typing.Optional[UserAccessGroupsItemType] = pydantic.Field(
        description=(
            "The type of access group based on how it was assigned to the user.\n"
            "\n"
            "- `admin` - Assigned to the user via API or in the designer\n"
            "- `ecommerce` - Assigned to the user via an ecommerce purchase\n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}

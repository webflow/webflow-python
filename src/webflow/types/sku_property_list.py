# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .sku_property_list_enum_item import SkuPropertyListEnumItem

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class SkuPropertyList(pydantic.BaseModel):
    """
    A variant/option type for a SKU
    """

    id: typing.Optional[str] = pydantic.Field(
        description="Unique identifier for a collection of Product options/Variants"
    )
    name: typing.Optional[str] = pydantic.Field(description="Name of the collection of Product options/Variants")
    enum: typing.Optional[typing.List[SkuPropertyListEnumItem]] = pydantic.Field(
        description="The individual Product variants/Options that are contained within the collection"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}

# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .order_price import OrderPrice
from .order_totals_extras_item_type import OrderTotalsExtrasItemType

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class OrderTotalsExtrasItem(pydantic.BaseModel):
    """
    Extra order items, includes discounts, shipping, and taxes.
    """

    type: typing.Optional[OrderTotalsExtrasItemType] = pydantic.Field(description="The type of extra item this is.")
    name: typing.Optional[str] = pydantic.Field(
        description="A human-readable (but English) name for this extra charge."
    )
    description: typing.Optional[str] = pydantic.Field(
        description="A human-readable (but English) description of this extra charge."
    )
    price: typing.Optional[OrderPrice] = pydantic.Field(description="The price for the item")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}

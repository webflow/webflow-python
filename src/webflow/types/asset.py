# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .asset_variant import AssetVariant

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Asset(pydantic.BaseModel):
    id: typing.Optional[str] = pydantic.Field(description="Unique identifier for this asset")
    content_type: typing.Optional[str] = pydantic.Field(alias="contentType", description="File format type")
    size: typing.Optional[int] = pydantic.Field(description="size in bytes")
    site_id: typing.Optional[str] = pydantic.Field(
        alias="siteId", description="Unique identifier for the site that hosts this asset"
    )
    hosted_url: typing.Optional[str] = pydantic.Field(alias="hostedUrl", description="Link to the asset")
    original_file_name: typing.Optional[str] = pydantic.Field(
        alias="originalFileName", description="Original file name at the time of upload"
    )
    display_name: typing.Optional[str] = pydantic.Field(alias="displayName", description="Display name of the asset")
    last_updated: typing.Optional[dt.datetime] = pydantic.Field(
        alias="lastUpdated", description="Date the asset metadata was last updated"
    )
    created_on: typing.Optional[dt.datetime] = pydantic.Field(
        alias="createdOn", description="Date the asset metadata was created"
    )
    variants: typing.Optional[typing.List[AssetVariant]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}

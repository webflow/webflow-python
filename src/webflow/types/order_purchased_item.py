# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .order_price import OrderPrice
from .order_purchased_item_variant_image import OrderPurchasedItemVariantImage


class OrderPurchasedItem(pydantic_v1.BaseModel):
    """
    An Item that was purchased
    """

    count: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    Number of Item purchased.
    """

    row_total: typing.Optional[OrderPrice] = pydantic_v1.Field(alias="rowTotal", default=None)
    """
    The total for the row
    """

    product_id: typing.Optional[str] = pydantic_v1.Field(alias="productId", default=None)
    """
    The unique identifier for the Product
    """

    product_name: typing.Optional[str] = pydantic_v1.Field(alias="productName", default=None)
    """
    User-facing name of the Product
    """

    product_slug: typing.Optional[str] = pydantic_v1.Field(alias="productSlug", default=None)
    """
    Slug for the Product
    """

    variant_id: typing.Optional[str] = pydantic_v1.Field(alias="variantId", default=None)
    """
    Identifier for the Product Variant (SKU)
    """

    variant_name: typing.Optional[str] = pydantic_v1.Field(alias="variantName", default=None)
    """
    User-facing name of the Product Variant (SKU)
    """

    variant_slug: typing.Optional[str] = pydantic_v1.Field(alias="variantSlug", default=None)
    """
    Slug for the Product Variant (SKU)
    """

    variant_sku: typing.Optional[str] = pydantic_v1.Field(alias="variantSKU", default=None)
    """
    The user-defined custom SKU of the Product Variant (SKU)
    """

    variant_image: typing.Optional[OrderPurchasedItemVariantImage] = pydantic_v1.Field(
        alias="variantImage", default=None
    )
    variant_price: typing.Optional[OrderPrice] = pydantic_v1.Field(alias="variantPrice", default=None)
    """
    The price corresponding to the variant
    """

    weight: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The physical weight of the variant if provided, or null
    """

    width: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The physical width of the variant if provided, or null
    """

    height: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The physical height of the variant if provided, or null
    """

    length: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The physical length of the variant if provided, or null
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}

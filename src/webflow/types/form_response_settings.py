# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class FormResponseSettings(pydantic.BaseModel):
    send_email_confirmation: typing.Optional[bool] = pydantic.Field(
        alias="sendEmailConfirmation", description="Whether to send an email confirmation to the user"
    )
    redirect_url: typing.Optional[str] = pydantic.Field(
        alias="redirectUrl", description="The url or path to redirect the user to after form submission"
    )
    redirect_method: typing.Optional[str] = pydantic.Field(
        alias="redirectMethod", description="The HTTP request method to use for the redirectUrl (eg. POST or GET)"
    )
    redirect_action: typing.Optional[str] = pydantic.Field(
        alias="redirectAction", description="The action to take after form submission"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}

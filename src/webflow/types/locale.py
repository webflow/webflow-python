# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1


class Locale(pydantic_v1.BaseModel):
    id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The unique identifier for the locale.
    """

    cms_locale_id: typing.Optional[str] = pydantic_v1.Field(alias="cmsLocaleId", default=None)
    """
    A CMS-specific identifier for the locale.
    """

    enabled: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Indicates if the locale is enabled.
    """

    display_name: typing.Optional[str] = pydantic_v1.Field(alias="displayName", default=None)
    """
    The display name of the locale, typically in English.
    """

    display_image_id: typing.Optional[str] = pydantic_v1.Field(alias="displayImageId", default=None)
    """
    An optional ID for an image associated with the locale, nullable.
    """

    redirect: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Determines if requests should redirect to the locale's subdirectory.
    """

    subdirectory: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The subdirectory path for the locale, used in URLs.
    """

    tag: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    A tag or code representing the locale, often following a standard format like 'en-US'.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}

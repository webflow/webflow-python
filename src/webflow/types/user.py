# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .user_access_groups_item import UserAccessGroupsItem
from .user_data import UserData
from .user_status import UserStatus


class User(pydantic_v1.BaseModel):
    """
    The fields that define the schema for a given Item are based on the Collection that Item belongs to. Beyond the user defined fields, there are a handful of additional fields that are automatically created for all items
    """

    id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Unique identifier for the User
    """

    is_email_verified: typing.Optional[bool] = pydantic_v1.Field(alias="isEmailVerified", default=None)
    """
    Shows whether the user has verified their email address
    """

    last_updated: typing.Optional[dt.datetime] = pydantic_v1.Field(alias="lastUpdated", default=None)
    """
    The timestamp the user was updated
    """

    invited_on: typing.Optional[dt.datetime] = pydantic_v1.Field(alias="invitedOn", default=None)
    """
    The timestamp the user was invited
    """

    created_on: typing.Optional[dt.datetime] = pydantic_v1.Field(alias="createdOn", default=None)
    """
    The timestamp the user was created
    """

    last_login: typing.Optional[dt.datetime] = pydantic_v1.Field(alias="lastLogin", default=None)
    """
    The timestamp the user was logged in
    """

    status: typing.Optional[UserStatus] = pydantic_v1.Field(default=None)
    """
    The status of the user
    """

    access_groups: typing.Optional[typing.List[UserAccessGroupsItem]] = pydantic_v1.Field(
        alias="accessGroups", default=None
    )
    """
    Access groups the user belongs to
    """

    data: typing.Optional[UserData] = None

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}

# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .user_access_groups_item import UserAccessGroupsItem
from .user_data import UserData
from .user_status import UserStatus

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class User(pydantic.BaseModel):
    """
    The fields that define the schema for a given Item are based on the Collection that Item belongs to. Beyond the user defined fields, there are a handful of additional fields that are automatically created for all items
    """

    id: typing.Optional[str] = pydantic.Field(description="Unique identifier for the User")
    is_email_verified: typing.Optional[bool] = pydantic.Field(
        alias="isEmailVerified", description="Shows whether the user has verified their email address"
    )
    last_updated: typing.Optional[dt.datetime] = pydantic.Field(
        alias="lastUpdated", description="The timestamp the user was updated"
    )
    invited_on: typing.Optional[dt.datetime] = pydantic.Field(
        alias="invitedOn", description="The timestamp the user was invited"
    )
    created_on: typing.Optional[dt.datetime] = pydantic.Field(
        alias="createdOn", description="The timestamp the user was created"
    )
    last_login: typing.Optional[dt.datetime] = pydantic.Field(
        alias="lastLogin", description="The timestamp the user was logged in"
    )
    status: typing.Optional[UserStatus] = pydantic.Field(description="The status of the user")
    access_groups: typing.Optional[typing.List[UserAccessGroupsItem]] = pydantic.Field(
        alias="accessGroups", description="Access groups the user belongs to"
    )
    data: typing.Optional[UserData]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}

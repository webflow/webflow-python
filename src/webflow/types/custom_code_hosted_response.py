# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1


class CustomCodeHostedResponse(pydantic_v1.BaseModel):
    """
    Registered custom code for application
    """

    id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Human readable id, derived from the user-specified display name
    """

    can_copy: typing.Optional[bool] = pydantic_v1.Field(alias="canCopy", default=None)
    """
    Define whether the script can be copied on site duplication and transfer
    """

    display_name: typing.Optional[str] = pydantic_v1.Field(alias="displayName", default=None)
    """
    User-facing name for the script. Must be between 1 and 50 alphanumeric characters
    """

    hosted_location: typing.Optional[str] = pydantic_v1.Field(alias="hostedLocation", default=None)
    """
    URI for an externally hosted script location
    """

    integrity_hash: typing.Optional[str] = pydantic_v1.Field(alias="integrityHash", default=None)
    """
    Sub-Resource Integrity Hash. Only required for externally hosted scripts (passed via hostedLocation)
    """

    created_on: typing.Optional[str] = pydantic_v1.Field(alias="createdOn", default=None)
    """
    Timestamp when the script version was created
    """

    last_updated: typing.Optional[str] = pydantic_v1.Field(alias="lastUpdated", default=None)
    """
    Timestamp when the script version was last updated
    """

    version: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    A Semantic Version (SemVer) string, denoting the version of the script
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}

# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .form_field import FormField
from .form_response_settings import FormResponseSettings

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Form(pydantic.BaseModel):
    id: typing.Optional[str] = pydantic.Field(description="The unique id for the Form")
    display_name: typing.Optional[str] = pydantic.Field(
        alias="displayName", description="The Form name displayed on the site"
    )
    site_id: typing.Optional[str] = pydantic.Field(
        alias="siteId", description="The unique id of the Site the Form belongs to"
    )
    site_domain_id: typing.Optional[str] = pydantic.Field(
        alias="siteDomainId", description="The unique id corresponding to the site's Domain name"
    )
    page_id: typing.Optional[str] = pydantic.Field(
        alias="pageId", description="The unique id for the Page on which the Form is placed"
    )
    page_name: typing.Optional[str] = pydantic.Field(
        alias="pageName", description="The user-visible name of the Page where the Form is placed"
    )
    workspace_id: typing.Optional[str] = pydantic.Field(
        alias="workspaceId", description="The unique id of the Workspace the Site belongs to"
    )
    created_on: typing.Optional[dt.datetime] = pydantic.Field(
        alias="createdOn", description="Date that the Form was created on"
    )
    last_updated: typing.Optional[dt.datetime] = pydantic.Field(
        alias="lastUpdated", description="Date that the Form was last updated on"
    )
    fields: typing.Optional[typing.List[FormField]]
    response_settings: typing.Optional[FormResponseSettings] = pydantic.Field(alias="responseSettings")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}

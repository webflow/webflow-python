# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class PageOpenGraph(pydantic.BaseModel):
    """
    Open Graph fields for the Page
    """

    title: typing.Optional[str] = pydantic.Field(description="The title supplied to Open Graph annotations")
    title_copied: typing.Optional[bool] = pydantic.Field(
        alias="titleCopied", description="Indicates the Open Graph title was copied from the SEO title"
    )
    description: typing.Optional[str] = pydantic.Field(description="The description supplied to Open Graph annotations")
    description_copied: typing.Optional[bool] = pydantic.Field(
        alias="descriptionCopied",
        description="Indicates the Open Graph description was copied from the SEO description",
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}

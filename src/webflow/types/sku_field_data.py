# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .sku_field_data_compare_at_price import SkuFieldDataCompareAtPrice
from .sku_field_data_ec_sku_billing_method import SkuFieldDataEcSkuBillingMethod
from .sku_field_data_ec_sku_subscription_plan import SkuFieldDataEcSkuSubscriptionPlan
from .sku_field_data_price import SkuFieldDataPrice
from .sku_value_list import SkuValueList


class SkuFieldData(pydantic_v1.BaseModel):
    """
    Standard and Custom fields for a SKU
    """

    sku_values: typing.Optional[SkuValueList] = pydantic_v1.Field(alias="sku-values", default=None)
    name: str = pydantic_v1.Field()
    """
    Name of the Product
    """

    slug: str = pydantic_v1.Field()
    """
    URL structure of the Product in your site.
    """

    price: SkuFieldDataPrice = pydantic_v1.Field()
    """
    price of SKU
    """

    compare_at_price: typing.Optional[SkuFieldDataCompareAtPrice] = pydantic_v1.Field(
        alias="compare-at-price", default=None
    )
    """
    comparison price of SKU
    """

    ec_sku_billing_method: typing.Optional[SkuFieldDataEcSkuBillingMethod] = pydantic_v1.Field(
        alias="ec-sku-billing-method", default=None
    )
    ec_sku_subscription_plan: typing.Optional[SkuFieldDataEcSkuSubscriptionPlan] = pydantic_v1.Field(
        alias="ec-sku-subscription-plan", default=None
    )
    track_inventory: typing.Optional[bool] = pydantic_v1.Field(alias="track-inventory", default=None)
    """
    A boolean indicating whether inventory for this product should be tracked.
    """

    quantity: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    Quantity of SKU that will be tracked as items are ordered.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}

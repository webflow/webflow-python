# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .inventory_item_inventory_type import InventoryItemInventoryType

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class InventoryItem(pydantic.BaseModel):
    """
    The availabile inventory for an item
    """

    id: typing.Optional[str] = pydantic.Field(description="Unique identifier for a SKU item")
    quantity: typing.Optional[float] = pydantic.Field(
        description="Total quantity of items remaining in inventory (if inventoryType is finite)"
    )
    inventory_type: typing.Optional[InventoryItemInventoryType] = pydantic.Field(
        alias="inventoryType", description="infinite or finite"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}

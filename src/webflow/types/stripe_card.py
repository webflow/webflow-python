# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .stripe_card_brand import StripeCardBrand
from .stripe_card_expires import StripeCardExpires

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class StripeCard(pydantic.BaseModel):
    """
    Details on the card used to fulfill this order, if this order was finalized with Stripe.
    """

    last_4: typing.Optional[str] = pydantic.Field(
        alias="last4", description="The last 4 digits on the card as a string"
    )
    brand: typing.Optional[StripeCardBrand] = pydantic.Field(description="The card's brand (ie. credit card network)")
    owner_name: typing.Optional[str] = pydantic.Field(alias="ownerName", description="The name on the card.")
    expires: typing.Optional[StripeCardExpires] = pydantic.Field(description="The card's expiration date.")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}

# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .script_apply_location import ScriptApplyLocation

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ScriptApply(pydantic.BaseModel):
    id: str = pydantic.Field(description="Id of the registered custom code script")
    location: ScriptApplyLocation = pydantic.Field(
        description="Location of the script, either in the header or footer of the published site"
    )
    version: str = pydantic.Field(description="Semantic Version String for the registered script _e.g. 0.0.1_")
    attributes: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description="Developer-specified key/value pairs to be applied as attributes to the script"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}

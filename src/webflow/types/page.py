# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .page_open_graph import PageOpenGraph
from .page_seo import PageSeo

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Page(pydantic.BaseModel):
    """
    The Page object
    """

    id: typing.Optional[str] = pydantic.Field(description="Unique identifier for the Page")
    site_id: typing.Optional[str] = pydantic.Field(alias="siteId", description="Unique identifier for the Site")
    title: typing.Optional[str] = pydantic.Field(description="Title of the Page")
    slug: typing.Optional[str] = pydantic.Field(description="slug of the Page (derived from title)")
    parent_id: typing.Optional[str] = pydantic.Field(alias="parentId", description="Identifier of the parent folder")
    collection_id: typing.Optional[str] = pydantic.Field(
        alias="collectionId",
        description="Unique identifier for a linked Collection, value will be null if the Page is not part of a Collection.",
    )
    created_on: typing.Optional[dt.datetime] = pydantic.Field(
        alias="createdOn", description="The date the Page was created"
    )
    last_updated: typing.Optional[dt.datetime] = pydantic.Field(
        alias="lastUpdated", description="The date the Page was most recently updated"
    )
    archived: typing.Optional[bool] = pydantic.Field(description="Whether the Page has been archived")
    draft: typing.Optional[bool] = pydantic.Field(description="Whether the Page is a draft")
    can_branch: typing.Optional[bool] = pydantic.Field(
        alias="canBranch",
        description="Indicates whether the Page supports [Page Branching](https://university.webflow.com/lesson/page-branching)",
    )
    is_members_only: typing.Optional[bool] = pydantic.Field(
        alias="isMembersOnly",
        description="Indicates whether the Page is restricted by [Memberships Controls](https://university.webflow.com/lesson/webflow-memberships-overview#how-to-manage-page-restrictions)",
    )
    seo: typing.Optional[PageSeo] = pydantic.Field(description="SEO-related fields for the Page")
    open_graph: typing.Optional[PageOpenGraph] = pydantic.Field(
        alias="openGraph", description="Open Graph fields for the Page"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}

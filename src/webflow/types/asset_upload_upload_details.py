# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class AssetUploadUploadDetails(pydantic.BaseModel):
    """
    Metadata for uploading the asset binary
    """

    acl: typing.Optional[str] = None
    bucket: typing.Optional[str] = None
    key: typing.Optional[str] = None
    policy: typing.Optional[str] = pydantic.Field(alias="Policy", default=None)
    x_amz_algorithm: typing.Optional[str] = pydantic.Field(alias="X-Amz-Algorithm", default=None)
    x_amz_credential: typing.Optional[str] = pydantic.Field(alias="X-Amz-Credential", default=None)
    x_amz_date: typing.Optional[str] = pydantic.Field(alias="X-Amz-Date", default=None)
    x_amz_security_token: typing.Optional[str] = pydantic.Field(
        alias="X-Amz-Security-Token",
        default=None,
        description="(optional) Temporary security token obtained when authenticated through AWS STS",
    )
    x_amz_signature: typing.Optional[str] = pydantic.Field(alias="X-Amz-Signature", default=None)
    success_action_status: typing.Optional[str] = None
    content_type: typing.Optional[str] = pydantic.Field(alias="content-type", default=None)
    cache_control: typing.Optional[str] = pydantic.Field(alias="Cache-Control", default=None)

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}

# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .asset_upload_upload_details import AssetUploadUploadDetails

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class AssetUpload(pydantic.BaseModel):
    upload_details: typing.Optional[AssetUploadUploadDetails] = pydantic.Field(
        alias="uploadDetails", default=None, description="Metadata for uploading the asset binary"
    )
    id: typing.Optional[str] = None
    content_type: typing.Optional[str] = pydantic.Field(alias="contentType", default=None)
    parent_folder: typing.Optional[str] = pydantic.Field(
        alias="parentFolder", default=None, description="Parent folder for the asset"
    )
    hosted_url: typing.Optional[str] = pydantic.Field(
        alias="hostedUrl", default=None, description="Represents the link to the asset"
    )
    upload_url: typing.Optional[str] = pydantic.Field(alias="uploadUrl", default=None)
    asset_url: typing.Optional[str] = pydantic.Field(alias="assetUrl", default=None, description="S3 link to the asset")
    original_file_name: typing.Optional[str] = pydantic.Field(
        alias="originalFileName",
        default=None,
        description="Original file name when uploaded. If not specified at time of upload, it may be extracted from the raw file name",
    )
    last_updated: typing.Optional[dt.datetime] = pydantic.Field(
        alias="lastUpdated", default=None, description="Date the asset metadata was last updated"
    )
    created_on: typing.Optional[dt.datetime] = pydantic.Field(
        alias="createdOn", default=None, description="Date the asset metadata was created"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}

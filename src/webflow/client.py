# This file was auto-generated by Fern from our API Definition.

import typing

import httpx

from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import WebflowEnvironment
from .resources.access_groups.client import AccessGroupsClient, AsyncAccessGroupsClient
from .resources.assets.client import AssetsClient, AsyncAssetsClient
from .resources.collections.client import AsyncCollectionsClient, CollectionsClient
from .resources.ecommerce.client import AsyncEcommerceClient, EcommerceClient
from .resources.forms.client import AsyncFormsClient, FormsClient
from .resources.inventory.client import AsyncInventoryClient, InventoryClient
from .resources.orders.client import AsyncOrdersClient, OrdersClient
from .resources.pages.client import AsyncPagesClient, PagesClient
from .resources.products.client import AsyncProductsClient, ProductsClient
from .resources.scripts.client import AsyncScriptsClient, ScriptsClient
from .resources.sites.client import AsyncSitesClient, SitesClient
from .resources.token.client import AsyncTokenClient, TokenClient
from .resources.users.client import AsyncUsersClient, UsersClient
from .resources.webhooks.client import AsyncWebhooksClient, WebhooksClient


class Webflow:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : WebflowEnvironment
        The environment to use for requests from the client. from .environment import WebflowEnvironment



        Defaults to WebflowEnvironment.DEFAULT



    access_token : typing.Union[str, typing.Callable[[], str]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from webflow.client import Webflow

    client = Webflow(
        access_token="YOUR_ACCESS_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: WebflowEnvironment = WebflowEnvironment.DEFAULT,
        access_token: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            access_token=access_token,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.token = TokenClient(client_wrapper=self._client_wrapper)
        self.sites = SitesClient(client_wrapper=self._client_wrapper)
        self.collections = CollectionsClient(client_wrapper=self._client_wrapper)
        self.pages = PagesClient(client_wrapper=self._client_wrapper)
        self.scripts = ScriptsClient(client_wrapper=self._client_wrapper)
        self.assets = AssetsClient(client_wrapper=self._client_wrapper)
        self.webhooks = WebhooksClient(client_wrapper=self._client_wrapper)
        self.forms = FormsClient(client_wrapper=self._client_wrapper)
        self.users = UsersClient(client_wrapper=self._client_wrapper)
        self.access_groups = AccessGroupsClient(client_wrapper=self._client_wrapper)
        self.products = ProductsClient(client_wrapper=self._client_wrapper)
        self.orders = OrdersClient(client_wrapper=self._client_wrapper)
        self.inventory = InventoryClient(client_wrapper=self._client_wrapper)
        self.ecommerce = EcommerceClient(client_wrapper=self._client_wrapper)


class AsyncWebflow:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : WebflowEnvironment
        The environment to use for requests from the client. from .environment import WebflowEnvironment



        Defaults to WebflowEnvironment.DEFAULT



    access_token : typing.Union[str, typing.Callable[[], str]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from webflow.client import AsyncWebflow

    client = AsyncWebflow(
        access_token="YOUR_ACCESS_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: WebflowEnvironment = WebflowEnvironment.DEFAULT,
        access_token: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            access_token=access_token,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.token = AsyncTokenClient(client_wrapper=self._client_wrapper)
        self.sites = AsyncSitesClient(client_wrapper=self._client_wrapper)
        self.collections = AsyncCollectionsClient(client_wrapper=self._client_wrapper)
        self.pages = AsyncPagesClient(client_wrapper=self._client_wrapper)
        self.scripts = AsyncScriptsClient(client_wrapper=self._client_wrapper)
        self.assets = AsyncAssetsClient(client_wrapper=self._client_wrapper)
        self.webhooks = AsyncWebhooksClient(client_wrapper=self._client_wrapper)
        self.forms = AsyncFormsClient(client_wrapper=self._client_wrapper)
        self.users = AsyncUsersClient(client_wrapper=self._client_wrapper)
        self.access_groups = AsyncAccessGroupsClient(client_wrapper=self._client_wrapper)
        self.products = AsyncProductsClient(client_wrapper=self._client_wrapper)
        self.orders = AsyncOrdersClient(client_wrapper=self._client_wrapper)
        self.inventory = AsyncInventoryClient(client_wrapper=self._client_wrapper)
        self.ecommerce = AsyncEcommerceClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: WebflowEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
